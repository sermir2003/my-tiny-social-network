openapi: 3.0.0
info:
  title: Social Network User API
  description: MyTinySocialNetwork User to Main server OpenAPI specification
  version: 1.0.0
  contact:
    name: Sergey Mironov
    email: sermir2003@gmail.com
servers:
  - url: http://localhost:8080/api/v1
    description: Social network (main service)
  - url: http://localhost:8083
    description: stats service
paths:
  /user/sign-up:
    post:
      summary: Registration
      description: Registers new user with provided data
      operationId: SignUp
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          $ref: '#/components/responses/Token'
        '400':
          $ref: '#/components/responses/InvalidCredentialsError'
          
  /user/sign-in:
    post:
      summary: Authtorization
      description: Login via password
      operationId: SignIn
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          $ref: '#/components/responses/Token'
        '400':
          $ref: '#/components/responses/InvalidCredentialsError'
          
  /user/personal:
    put:
      summary: Change personal data
      description: Change personal data like name, surname, date of birth, phone number, email
      operationId: UpdatePersonal
      tags:
        - personal
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalData'
      responses:
        '200':
          description: Success
        '400':
          description: Personal data is missing or not valid
        '401':
          $ref: '#/components/responses/TokenUnauthorizedError'
  
  /post:
    post:
      summary: Create post
      description: Create new post with provided content
      operationId: CreatePost
      tags:
        - post
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Post content
              type: object
              properties:
                content:
                  type: string
                  example: Is it pitiful if you can't wear a beautiful kimono?
              required:
                - content
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  post_id:
                    type: integer
                    format: uint64
                    example: 1
        '400':
          description: Post content is missing
        '401':
          $ref: '#/components/responses/TokenUnauthorizedError'
  
  /post/{post_id}:
    put:
      summary: Update post
      description: Update content of post with provided post_id with provided new contest
      operationId: UpdatePost
      tags:
        - post
      security:
        - TokenAuth: []
      parameters:
        - name: post_id
          in: path
          description: Post id
          required: true
          schema:
            type: integer
            format: uint64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Post content
              type: object
              properties:
                content:
                  type: string
                  example: It's okay, it's okay. I like this kimono. Let the younger ones eat more than that.
              required:
                - content
      responses:
        '200':
          description: Success
        '400':
          description: Post parameters are missing
        '401':
          $ref: '#/components/responses/TokenUnauthorizedError'
        '403':
          $ref: '#/components/responses/PostAccessDeniedError'
        '404':
          $ref: '#/components/responses/PostNotFoundError'
    delete:
      summary: Delete post
      description: Delete post with provided post_id
      operationId: DeletePost
      tags:
        - post
      security:
        - TokenAuth: []
      parameters:
        - name: post_id
          in: path
          description: Post id
          required: true
          schema:
            type: integer
            format: uint64
            example: 1
      responses:
        '200':
          description: Success
        '400':
          description: Post parameter is missing
        '401':
          $ref: '#/components/responses/TokenUnauthorizedError'
        '403':
          $ref: '#/components/responses/PostAccessDeniedError'
        '404':
          $ref: '#/components/responses/PostNotFoundError'
    get:
      summary: Get post by id
      description: Get post with provided post_id
      operationId: GetPostById
      tags:
        - post
      security:
        - TokenAuth: []
      parameters:
        - name: post_id
          in: path
          description: Post id
          required: true
          schema:
            type: integer
            format: uint64
            example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Post parameter is missing
        '401':
          $ref: '#/components/responses/TokenUnauthorizedError'
        '403':
          $ref: '#/components/responses/PostAccessDeniedError'
        '404':
          $ref: '#/components/responses/PostNotFoundError'
  
  /pagination/{author_id}/{offset}/{limit}:
    get:
      summary: Get pagination
      description: Let's look at the sequence of posts by the user with the `author_id` specified. Let's sort them by creation timestamp. This method will output a `limit` number of posts from that sequence, starting with an `offset`. If there are less than `limit` posts, it will output how many there are.
      operationId: GetPagination
      tags:
        - post
      security:
        - TokenAuth: []
      parameters:
        - name: author_id
          in: path
          description: The id of author of posts whose pagination is requested
          required: true
          schema:
            type: integer
            format: uint64
            example: 1
        - name: offset
          in: path
          description: Offset of pagination
          required: true
          schema:
            type: integer
            format: uint64
            example: 1
        - name: limit
          in: path
          description: Limit of pagination
          required: true
          schema:
            type: integer
            format: uint32
            example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: Posts from the requested pagination
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
        '400':
          description: Pagination parameters are missing
        '401':
          $ref: '#/components/responses/TokenUnauthorizedError'
  
  /post/view/{post_id}:
    post:
      summary: Report on post view
      description: Reports that the `post_id` was viewed by this user.
      operationId: PostView
      tags:
        - reaction
      security:
        - TokenAuth: []
      parameters:
        - name: post_id
          in: path
          description: The id of viewed post
          required: true
          schema:
            type: integer
            format: uint64
            example: 1
      responses:
        '200':
          description: Success
        '400':
          description: Post id is missing
        '401':
          $ref: '#/components/responses/TokenUnauthorizedError'
  
  /post/like/{post_id}:
    post:
      summary: Report on post view
      description: Reports that the `post_id` was viewed by this user.
      operationId: PostLike
      tags:
        - reaction
      security:
        - TokenAuth: []
      parameters:
        - name: post_id
          in: path
          description: The id of viewed post
          required: true
          schema:
            type: integer
            format: uint64
            example: 1
      responses:
        '200':
          description: Success
        '400':
          description: Post id is missing
        '401':
          $ref: '#/components/responses/TokenUnauthorizedError'

  /health:
    get:
      summary: Health check
      description: http handle that always returns 200 OK
      operationId: HealthCheck
      tags:
        - health
      responses:
        '200':
          description: The service is not crashed

  /post/stats/{post_id}:
    get:
      summary: Returns stats of `post_id`
      description: Returns the number of views and comments of the post with given `post_id`.
      operationId: PostStats
      tags:
        - stats
      security:
        - TokenAuth: []
      parameters:
        - name: post_id
          in: path
          description: The id of requested post
          required: true
          schema:
            type: integer
            format: uint64
            example: 1
      responses:
        '200':
          description: Success
        '400':
          description: Post id is missing
        '401':
          $ref: '#/components/responses/TokenUnauthorizedError'

  /posts-top/{top_type}/{count}:
    get:
      summary: Returns top viewed or liked posts
      description: The `top_type` must be set to "view" or "like". In the case of "view", it returns the top-`count` of posts by views; in the case of "like", it returns the top-`count` of posts by likes.
      operationId: PostsTop
      tags:
          - stats
      security:
        - TokenAuth: []
      parameters:
        - name: top_type
          in: path
          description: The number of items in the top
          required: true
          schema:
            type: string
            format: '^(view|like)$'
            example: view
        - name: count
          in: path
          description: The number of items in the top
          required: true
          schema:
            type: integer
            format: uint64
            example: 1
      responses:
        '200':
          description: Success
        '400':
          description: The top type or the count is missing
        '401':
          $ref: '#/components/responses/TokenUnauthorizedError'

  /users-top/{count}:
    get:
      summary: Returns top users by likes
      description: Returns the top-`count` of users by the total number of likes.
      operationId: UsersTop
      tags:
          - stats
      security:
        - TokenAuth: []
      parameters:
        - name: count
          in: path
          description: The number of items in the top
          required: true
          schema:
            type: integer
            format: uint64
            example: 1
      responses:
        '200':
          description: Success
        '400':
          description: The count is missing
        '401':
          $ref: '#/components/responses/TokenUnauthorizedError'



components:
  schemas:
    Credentials:
      description: Login and password
      type: object
      properties:
        login:
          type: string
          pattern: '^[\w\-]{1,255}$'
          example: super-nezuko0112
        password:
          type: string
          pattern: '^[\w\-@$!%*#?&]{6,255}$'
          example: secret#112
      required:
        - login
        - password
    
    PersonalData:
      description: Name, surname, birthdate, etc
      type: object
      properties:
        name:
          type: string
          pattern: '^[A-Z][a-z]{0,254}$'
          example: Nezuko
        surname:
          type: string
          pattern: '^[A-Z][a-z]{0,254}$'
          example: Kamado
        birthdate:
          type: string
          format: date
          example: 2004-12-28
        email:
          type: string
          pattern: '^\w|\-+@\w|\-+\.\w|\-+$'
          maxLength: 255
          example: super-nezuko@DemonSlayer.anime
        phone:
          type: string
          pattern: '^\+\d+$'
          maxLength: 32
          example: "+2556517263803249791110286440017"
      minProperties: 1
    
    Post:
      type: object
      properties:
        post_id:
          type: integer
          format: uint64
        author_id:
          type: integer
          format: uint64
        content:
          type: string
        create_timestamp:
          type: string
          format: date-time
        update_timestamp:
          type: string
          format: date-time


  responses:
    Token:
      description: Token for futher authentification
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
    
    
    
    InvalidCredentialsError:
      description: Credentials are missing or not valid or login has already been taken or wrong login or password
    
    TokenUnauthorizedError:
      description: API key is missing or invalid
    
    PostAccessDeniedError:
      description: You do not have the authority to modify this post
    
    PostNotFoundError:
      description: There is no post with provided id


  securitySchemes:
    TokenAuth:
      name: X-API-Key
      type: apiKey
      in: header



tags:
  - name: auth
  - name: personal
  - name: post
  - name: reaction
  - name: stats
  - name: health
